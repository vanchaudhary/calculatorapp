name: Deploy Calculator Database

on:
  push:
    branches: [ main, database-demo ]
    paths: [ 'database/**' ]
  pull_request:
    branches: [ main ]
    paths: [ 'database/**' ]

env:
  SQL_SERVER_NAME: calculator-sql-server
  SQL_DATABASE_NAME: calculator-db

jobs:
  validate-database:
    runs-on: ubuntu-latest
    name: üîç Validate Database Schema
    
    steps:
    - name: üì• Checkout Code
      uses: actions/checkout@v4
      
    - name: üîç Validate SQL Project Structure
      run: |
        echo "üîç Validating database project structure..."
        
        # Check if required files exist
        if [ ! -f "database/Calculator.sqlproj" ]; then
          echo "‚ùå Calculator.sqlproj not found"
          exit 1
        fi
        
        if [ ! -f "database/Tables/Users.sql" ]; then
          echo "‚ùå Users.sql not found"
          exit 1
        fi
        
        if [ ! -f "database/Tables/Calculations.sql" ]; then
          echo "‚ùå Calculations.sql not found"  
          exit 1
        fi
        
        echo "‚úÖ Database project structure is valid"

  deploy-to-staging:
    needs: validate-database
    if: github.ref == 'refs/heads/database-demo'
    runs-on: ubuntu-latest
    name: üöÄ Deploy to Staging Database
    
    steps:
    - name: üì• Checkout Code
      uses: actions/checkout@v4
      
    - name: üîë Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: üóÑÔ∏è Deploy Database Schema to Staging using sqlcmd
      run: |
        # Install sqlcmd
        curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
        curl https://packages.microsoft.com/config/ubuntu/20.04/prod.list | sudo tee /etc/apt/sources.list.d/msprod.list
        sudo apt-get update
        sudo ACCEPT_EULA=Y apt-get install -y mssql-tools unixodbc-dev
        
        # Add sqlcmd to PATH
        echo 'export PATH="$PATH:/opt/mssql-tools/bin"' >> ~/.bashrc
        source ~/.bashrc
        export PATH="$PATH:/opt/mssql-tools/bin"
        
        # Create database schema
        /opt/mssql-tools/bin/sqlcmd -S calculator-sql-server-vc.database.windows.net \
          -d calculator \
          -U sqladmin \
          -P '${{ secrets.AZURE_SQL_PASSWORD }}' \
          -Q "
          IF NOT EXISTS (SELECT * FROM sysobjects WHERE name='Users' AND xtype='U')
          BEGIN
              CREATE TABLE Users (
                  id UNIQUEIDENTIFIER PRIMARY KEY DEFAULT NEWID(),
                  session_id NVARCHAR(255) UNIQUE NOT NULL,
                  created_at DATETIME2 DEFAULT GETDATE()
              );
              PRINT 'Users table created successfully';
          END
          ELSE
          BEGIN
              PRINT 'Users table already exists';
          END;
          
          IF NOT EXISTS (SELECT * FROM sysobjects WHERE name='Calculations' AND xtype='U')
          BEGIN
              CREATE TABLE Calculations (
                  id UNIQUEIDENTIFIER PRIMARY KEY DEFAULT NEWID(),
                  user_id UNIQUEIDENTIFIER REFERENCES Users(id),
                  expression NVARCHAR(500) NOT NULL,
                  result NVARCHAR(100) NOT NULL,
                  created_at DATETIME2 DEFAULT GETDATE()
              );
              PRINT 'Calculations table created successfully';
          END
          ELSE
          BEGIN
              PRINT 'Calculations table already exists';
          END;
          
          SELECT TABLE_NAME, 'Table exists' as Status
          FROM INFORMATION_SCHEMA.TABLES 
          WHERE TABLE_SCHEMA = 'dbo' 
          AND TABLE_NAME IN ('Users', 'Calculations');
          "
        
    - name: üß™ Run Database Tests on Staging
      run: echo "‚úÖ Database deployment to staging completed successfully"

  deploy-to-production:
    needs: validate-database
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    name: üè≠ Deploy to Production Database
    environment: production
    
    steps:
    - name: üì• Checkout Code
      uses: actions/checkout@v4
      
    - name: üîë Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}
    
    - name: üíæ Backup Production Database
      run: |
        echo "üíæ Creating backup of production database..."
        BACKUP_NAME="calculator-db-backup-$(date +%Y%m%d-%H%M%S)"
        
        az sql db export \
          --server ${{ env.SQL_SERVER_NAME }} \
          --name ${{ env.SQL_DATABASE_NAME }} \
          --admin-user ${{ secrets.SQL_ADMIN_USER }} \
          --admin-password ${{ secrets.SQL_ADMIN_PASSWORD }} \
          --storage-key ${{ secrets.STORAGE_ACCOUNT_KEY }} \
          --storage-key-type StorageAccessKey \
          --storage-uri "https://${{ secrets.STORAGE_ACCOUNT_NAME }}.blob.core.windows.net/backups/${BACKUP_NAME}.bacpac" || true
        
        echo "‚úÖ Backup completed: ${BACKUP_NAME}.bacpac"
    
    - name: üóÑÔ∏è Deploy Database Schema to Production using sqlcmd
      run: |
        # Install sqlcmd
        curl https://packages.microsoft.com/keys/microsoft.asc | sudo apt-key add -
        curl https://packages.microsoft.com/config/ubuntu/20.04/prod.list | sudo tee /etc/apt/sources.list.d/msprod.list
        sudo apt-get update
        sudo ACCEPT_EULA=Y apt-get install -y mssql-tools unixodbc-dev
        
        # Add sqlcmd to PATH
        export PATH="$PATH:/opt/mssql-tools/bin"
        
        # Create database schema
        /opt/mssql-tools/bin/sqlcmd -S calculator-sql-server-vc.database.windows.net \
          -d calculator \
          -U sqladmin \
          -P '${{ secrets.AZURE_SQL_PASSWORD }}' \
          -Q "
          IF NOT EXISTS (SELECT * FROM sysobjects WHERE name='Users' AND xtype='U')
          BEGIN
              CREATE TABLE Users (
                  id UNIQUEIDENTIFIER PRIMARY KEY DEFAULT NEWID(),
                  session_id NVARCHAR(255) UNIQUE NOT NULL,
                  created_at DATETIME2 DEFAULT GETDATE()
              );
              PRINT 'Users table created successfully';
          END
          ELSE
          BEGIN
              PRINT 'Users table already exists';
          END;
          
          IF NOT EXISTS (SELECT * FROM sysobjects WHERE name='Calculations' AND xtype='U')
          BEGIN
              CREATE TABLE Calculations (
                  id UNIQUEIDENTIFIER PRIMARY KEY DEFAULT NEWID(),
                  user_id UNIQUEIDENTIFIER REFERENCES Users(id),
                  expression NVARCHAR(500) NOT NULL,
                  result NVARCHAR(100) NOT NULL,
                  created_at DATETIME2 DEFAULT GETDATE()
              );
              PRINT 'Calculations table created successfully';
          END
          ELSE
          BEGIN
              PRINT 'Calculations table already exists';
          END;
          "
        
    - name: ‚úÖ Verify Production Deployment
      run: |
        export PATH="$PATH:/opt/mssql-tools/bin"
        /opt/mssql-tools/bin/sqlcmd -S calculator-sql-server-vc.database.windows.net \
          -d calculator \
          -U sqladmin \
          -P '${{ secrets.AZURE_SQL_PASSWORD }}' \
          -Q "SELECT COUNT(*) as TableCount, 'Database deployment verified' as Status FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = 'dbo' AND TABLE_NAME IN ('Users', 'Calculations')"
          
    - name: üìä Deployment Summary
      run: |
        echo "========================================"
        echo "üéØ DATABASE DEPLOYMENT COMPLETED"
        echo "========================================"
        echo "üì¶ Database: ${{ env.SQL_DATABASE_NAME }}"
        echo "üñ•Ô∏è Server: ${{ env.SQL_SERVER_NAME }}"
        echo "üåø Branch: ${{ github.ref_name }}"
        echo "üë§ Author: ${{ github.actor }}"
        echo "üìÖ Time: $(date)"
        echo "‚úÖ Ready for application deployment!"
        echo "========================================"