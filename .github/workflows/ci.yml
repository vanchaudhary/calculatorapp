name: Enhanced CI/CD - Deploy to Azure Container Registry

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  APP_NAME: calculator-app
  AZURE_CONTAINER_REGISTRY: calculatorappacr
  AZURE_RESOURCE_GROUP: calculator-app-rg
  CONTAINER_NAME: calculator-app
  IMAGE_TAG: ${{ github.sha }}

jobs:
  ci-cd-pipeline:
    runs-on: ubuntu-latest
    
    steps:
    # ========== CI PHASE ==========
    - name: üì• Checkout Code
      uses: actions/checkout@v4

    - name: üèóÔ∏è Build Docker Image
      run: |
        echo "üî® Building Docker image with tag: ${{ env.IMAGE_TAG }}"
        docker build -t ${{ env.CONTAINER_NAME }}:${{ env.IMAGE_TAG }} .
        docker build -t ${{ env.CONTAINER_NAME }}:latest .
        echo "‚úÖ Build completed successfully"

    - name: üß™ Run Automated Tests
      run: |
        echo "üß™ Starting automated testing..."
        
        # Start test container
        docker run -d -p 3001:3000 --name test-container ${{ env.CONTAINER_NAME }}:latest
        
        # Wait for app to start
        echo "‚è≥ Waiting for application to start..."
        sleep 10
        
        # Run health check
        echo "üîç Running health checks..."
        curl --fail --retry 3 --retry-delay 2 http://localhost:3001 || {
          echo "‚ùå Health check failed"
          docker logs test-container
          exit 1
        }
        
        echo "‚úÖ All tests passed!"
        
        # Cleanup test container
        docker stop test-container
        docker rm test-container

    # ========== AZURE ACR DEPLOYMENT ==========
    - name: üîë Azure Login
      if: github.ref == 'refs/heads/main'
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }}

    - name: üè≠ Login to Azure Container Registry
      if: github.ref == 'refs/heads/main'
      run: |
        echo "üîê Logging into Azure Container Registry..."
        az acr login --name ${{ env.AZURE_CONTAINER_REGISTRY }}
        echo "‚úÖ ACR login successful"

    - name: üöÄ Build and Push to ACR
      if: github.ref == 'refs/heads/main'
      run: |
        echo "üì¶ Tagging and pushing images to ACR..."
        
        # Tag images for ACR
        docker tag ${{ env.CONTAINER_NAME }}:latest ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}:latest
        docker tag ${{ env.CONTAINER_NAME }}:latest ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}:${{ env.IMAGE_TAG }}
        
        # Push to ACR
        docker push ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}:latest
        docker push ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}:${{ env.IMAGE_TAG }}
        
        echo "‚úÖ Images pushed to ACR successfully!"
        echo "üè≠ ACR Registry: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io"
        echo "üì¶ Image: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}:latest"

    # ========== AZURE CONTAINER INSTANCES DEPLOYMENT ==========
    - name: üåê Deploy to Azure Container Instances
      if: github.ref == 'refs/heads/main'
      run: |
        echo "üöÄ Deploying to Azure Container Instances..."
        
        # Delete existing container instance if exists
        az container delete \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name ${{ env.CONTAINER_NAME }}-demo \
          --yes || true
        
        # Create new container instance
        az container create \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name ${{ env.CONTAINER_NAME }}-demo \
          --image ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}:latest \
          --registry-login-server ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io \
          --registry-username ${{ env.AZURE_CONTAINER_REGISTRY }} \
          --registry-password ${{ secrets.ACR_PASSWORD }} \
          --dns-name-label calculator-demo-${{ github.run_number }} \
          --ports 3000 \
          --environment-variables PORT=3000 \
          --cpu 1 \
          --memory 1 \
          --restart-policy Always
        
        echo "‚úÖ Container deployment initiated!"

    - name: üîç Get Deployment Information
      if: github.ref == 'refs/heads/main'
      run: |
        echo "‚è≥ Waiting for container to start..."
        sleep 30
        
        # Get container information
        FQDN=$(az container show \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name ${{ env.CONTAINER_NAME }}-demo \
          --query ipAddress.fqdn \
          --output tsv)
        
        IP=$(az container show \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name ${{ env.CONTAINER_NAME }}-demo \
          --query ipAddress.ip \
          --output tsv)
        
        STATE=$(az container show \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name ${{ env.CONTAINER_NAME }}-demo \
          --query instanceView.state \
          --output tsv)
        
        echo "üéØ DEPLOYMENT INFORMATION:"
        echo "=================================="
        echo "üåê Live URL: http://$FQDN:3000"
        echo "üìç Public IP: $IP"
        echo "üìä Container State: $STATE"
        echo "üè≠ ACR Image: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io/${{ env.CONTAINER_NAME }}:latest"
        echo "=================================="

    - name: üè• Health Check Deployed Application
      if: github.ref == 'refs/heads/main'
      run: |
        echo "üîç Running health check on deployed application..."
        
        # Get FQDN for health check
        FQDN=$(az container show \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name ${{ env.CONTAINER_NAME }}-demo \
          --query ipAddress.fqdn \
          --output tsv)
        
        echo "Testing: http://$FQDN:3000"
        
        # Wait for application to be ready and test
        for i in {1..10}; do
          echo "Health check attempt $i/10..."
          if curl --fail --connect-timeout 10 http://$FQDN:3000; then
            echo "‚úÖ Application is live and healthy!"
            echo "üéâ Demo URL ready: http://$FQDN:3000"
            break
          else
            echo "‚ö†Ô∏è Attempt $i failed, retrying in 15 seconds..."
            sleep 15
            if [ $i -eq 10 ]; then
              echo "‚ö†Ô∏è Health check timeout - application may still be starting"
              echo "üìã Container logs:"
              az container logs --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name ${{ env.CONTAINER_NAME }}-demo
            fi
          fi
        done

    - name: üìä Final Deployment Summary
      if: always()
      run: |
        echo "========================================"
        echo "üéØ CI/CD PIPELINE COMPLETED"
        echo "========================================"
        echo "üì¶ Build: ${{ env.IMAGE_TAG }}"
        echo "üåø Branch: ${{ github.ref_name }}"
        echo "üë§ Author: ${{ github.actor }}"
        echo "üìÖ Time: $(date)"
        echo ""
        
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          echo "üöÄ PRODUCTION DEPLOYMENT:"
          echo "   üè≠ Azure Container Registry: ${{ env.AZURE_CONTAINER_REGISTRY }}.azurecr.io"
          echo "   üì¶ Image: ${{ env.CONTAINER_NAME }}:latest"
          echo "   üåê Live Demo: Check deployment information above"
          echo "   üéØ Ready for client presentation!"
        else
          echo "üß™ Testing completed for development branch"
        fi
        echo "========================================"