name: Enhanced CI/CD - Multi-Environment Docker Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  APP_NAME: calculator-app
  STAGING_PORT: 3002
  PRODUCTION_PORT: 3000

jobs:
  ci-cd-pipeline:
    runs-on: ubuntu-latest
    
    steps:
    # ========== CI PHASE ==========
    - name: 📥 Checkout Code
      uses: actions/checkout@v4

    - name: 🏗️ Build Docker Image
      run: |
        echo "🔨 Building Docker image with tag: ${{ github.sha }}"
        docker build -t ${{ env.APP_NAME }}:${{ github.sha }} .
        docker build -t ${{ env.APP_NAME }}:latest .
        echo "✅ Build completed successfully"

    - name: 🧪 Run Automated Tests
      run: |
        echo "🧪 Starting automated testing..."
        
        # Start test container
        docker run -d -p 3001:3000 --name test-container ${{ env.APP_NAME }}:${{ github.sha }}
        
        # Wait for app to start
        echo "⏳ Waiting for application to start..."
        sleep 12
        
        # Check if container is running
        echo "🔍 Checking container status..."
        docker ps --filter "name=test-container"
        
        # Check container logs
        echo "📋 Container logs:"
        docker logs test-container
        
        # Run health check with retry logic
        echo "🔍 Running health checks..."
        for i in {1..5}; do
          echo "Health check attempt $i/5..."
          if curl -f http://localhost:3001; then
            echo "✅ Health check passed"
            break
          else
            echo "⚠️ Health check attempt $i failed, retrying..."
            sleep 3
            if [ $i -eq 5 ]; then
              echo "❌ Health check failed after 5 attempts"
              docker logs test-container
              docker stop test-container || true
              docker rm test-container || true
              exit 1
            fi
          fi
        done
        
        # Simple functionality test
        echo "🧮 Testing calculator functionality..."
        response=$(curl -s http://localhost:3001 || echo "failed")
        if echo "$response" | grep -q "Calculator"; then
          echo "✅ Calculator app is responding correctly"
        else
          echo "❌ Calculator test failed - unexpected response"
          echo "Response: $response"
          docker logs test-container
        fi
        
        # Cleanup test container
        docker stop test-container || true
        docker rm test-container || true
        echo "✅ All tests completed!"

    # ========== CD PHASE ==========
    - name: 🟡 Deploy to Staging Environment
      run: |
        echo "🚀 Deploying to STAGING environment..."
        
        # Stop existing staging container if running
        docker stop staging-${{ env.APP_NAME }} 2>/dev/null || true
        docker rm staging-${{ env.APP_NAME }} 2>/dev/null || true
        
        # Deploy to staging
        docker run -d -p ${{ env.STAGING_PORT }}:3000 --name staging-${{ env.APP_NAME }} ${{ env.APP_NAME }}:${{ github.sha }}
        
        # Wait and verify staging deployment
        sleep 8
        echo "🔍 Verifying staging deployment..."
        
        for i in {1..3}; do
          if curl -f http://localhost:${{ env.STAGING_PORT }}; then
            echo "✅ STAGING deployment verified!"
            break
          else
            echo "⚠️ Staging verification attempt $i failed, retrying..."
            sleep 3
            if [ $i -eq 3 ]; then
              echo "❌ Staging deployment verification failed"
              docker logs staging-${{ env.APP_NAME }}
              exit 1
            fi
          fi
        done
        
        echo "🌐 Staging URL: http://localhost:${{ env.STAGING_PORT }}"

    - name: 🔍 Staging Smoke Tests
      run: |
        echo "🔬 Running staging smoke tests..."
        
        # Test main page
        echo "Testing main page..."
        if curl -f http://localhost:${{ env.STAGING_PORT }} > /dev/null; then
          echo "✅ Main page test passed"
        else
          echo "❌ Main page test failed"
          docker logs staging-${{ env.APP_NAME }}
          exit 1
        fi
        
        # Simple response test
        response=$(curl -s http://localhost:${{ env.STAGING_PORT }} || echo "failed")
        if echo "$response" | grep -q "Calculator"; then
          echo "✅ Staging smoke tests passed - app is responding correctly"
        else
          echo "❌ Staging smoke tests failed - unexpected response"
          echo "Response: $response"
          exit 1
        fi

    - name: 🟢 Deploy to Production Environment
      if: github.ref == 'refs/heads/main'
      run: |
        echo "🚀 Deploying to PRODUCTION environment..."
        
        # Backup current production (if exists)
        if docker ps --filter "name=production-${{ env.APP_NAME }}" --format "table {{.Names}}" | grep -q "production-${{ env.APP_NAME }}"; then
          echo "📦 Creating backup of current production..."
          docker tag production-${{ env.APP_NAME }} ${{ env.APP_NAME }}:backup-$(date +%Y%m%d-%H%M%S)
        fi
        
        # Stop existing production container
        docker stop production-${{ env.APP_NAME }} 2>/dev/null || true
        docker rm production-${{ env.APP_NAME }} 2>/dev/null || true
        
        # Deploy to production
        docker run -d -p ${{ env.PRODUCTION_PORT }}:3000 --name production-${{ env.APP_NAME }} ${{ env.APP_NAME }}:${{ github.sha }}
        
        # Wait and verify production deployment
        sleep 5
        curl --fail http://localhost:${{ env.PRODUCTION_PORT }} || (echo "❌ Production deployment failed" && exit 1)
        
        echo "✅ PRODUCTION deployment successful!"
        echo "🌐 Production URL: http://localhost:${{ env.PRODUCTION_PORT }}"

    - name: 🎯 Production Health Check
      if: github.ref == 'refs/heads/main'
      run: |
        echo "🏥 Running production health checks..."
        
        # Comprehensive health check
        for i in {1..3}; do
          echo "🔍 Health check attempt $i/3..."
          if curl --fail http://localhost:${{ env.PRODUCTION_PORT }} > /dev/null; then
            echo "✅ Production health check $i passed"
          else
            echo "❌ Production health check $i failed"
            if [ $i -eq 3 ]; then exit 1; fi
          fi
          sleep 2
        done
        
        echo "🎉 Production deployment verified and healthy!"

    - name: 🧹 Cleanup Staging Environment
      if: github.ref == 'refs/heads/main'
      run: |
        echo "🧹 Cleaning up staging environment..."
        docker stop staging-${{ env.APP_NAME }} 2>/dev/null || true
        docker rm staging-${{ env.APP_NAME }} 2>/dev/null || true
        echo "✅ Staging cleanup completed"

    - name: 📊 Deployment Summary
      if: always()
      run: |
        echo "========================================"
        echo "🎯 DEPLOYMENT SUMMARY"
        echo "========================================"
        echo "📦 Image Tag: ${{ github.sha }}"
        echo "🌿 Branch: ${{ github.ref_name }}"
        echo "👤 Triggered by: ${{ github.actor }}"
        echo "📅 Deploy Time: $(date)"
        
        if [ "${{ github.ref }}" = "refs/heads/main" ]; then
          echo "🟢 Production: http://localhost:${{ env.PRODUCTION_PORT }}"
        else
          echo "🟡 Staging: http://localhost:${{ env.STAGING_PORT }}"
        fi
        
        echo "========================================"
        echo "🚀 CI/CD Pipeline completed successfully!"
        echo "========================================"
